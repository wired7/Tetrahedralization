#version 450 core

layout(triangles) in;
layout(triangle_strip, max_vertices = 3) out;

in vec3 pos[3];
in vec3 n[3];
in vec4 vColor[3];
flat in uint oID[3];
flat in uint selected[3];
in gl_PerVertex
{
  vec4 gl_Position;
  float gl_PointSize;
  float gl_ClipDistance[];
} gl_in[];

out vec3 dist;
out vec3 worldPos;
out vec3 worldNormal;
out vec4 worldColor;
flat out uint worldOID;
flat out uint worldSelected;
out gl_PerVertex
{
  vec4 gl_Position;
  float gl_PointSize;
  float gl_ClipDistance[];
};

//uniform ivec2 WIN_SCALE;

void main(void)
{
	ivec2 WIN_SCALE = ivec2(1200, 800);
	vec2 p0 = WIN_SCALE * gl_in[0].gl_Position.xy / gl_in[0].gl_Position.w;
	vec2 p1 = WIN_SCALE * gl_in[1].gl_Position.xy / gl_in[1].gl_Position.w;
	vec2 p2 = WIN_SCALE * gl_in[2].gl_Position.xy / gl_in[2].gl_Position.w;

	vec2 v0 = p2 - p1;
	vec2 v1 = p2 - p0;
	vec2 v2 = p1 - p0;
	float area = abs(v1.x * v2.y - v1.y * v2.x);

	worldNormal = normalize(n[0] + n[1] + n[2]);

	dist = vec3(area / length(v0), 0, 0);
	worldPos = pos[0];
	worldColor = vColor[0];
	worldOID = oID[0];
	worldSelected = selected[0];
	gl_Position = gl_in[0].gl_Position;
	EmitVertex();

	dist = vec3(0, area / length(v1), 0);
	worldPos = pos[1];
	worldColor = vColor[1];
	worldOID = oID[1];
	worldSelected = selected[1];
	gl_Position = gl_in[1].gl_Position;
	EmitVertex();

	dist = vec3(0, 0, area / length(v2));
	worldPos = pos[2];
	worldColor = vColor[2];
	worldOID = oID[2];
	worldSelected = selected[2];
	gl_Position = gl_in[2].gl_Position;
	EmitVertex();

	EndPrimitive();
}